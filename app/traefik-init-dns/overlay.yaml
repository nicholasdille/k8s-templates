#@ load("@ytt:overlay", "overlay")

#@overlay/match by=overlay.subset({"kind":"Deployment"})
---
spec:
  template:
    spec:
      #@overlay/match missing_ok=True
      initContainers:
      #@overlay/match by="name",missing_ok=True
      - image: alpine
        name: traefik-init-dns
        command:
        - sh
        args:
        - -c
        - |
          curl -sLo /usr/local/bin/kubectl https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl; \
          chmod +x /usr/local/bin/kubectl; \
          kubectl config set-cluster self --server=${KUBERNETES_SERVICE_HOST}:${KUBERNETES_SERVICE_PORT} --certificate-authority=/var/run/secrets/kubernetes.io/serviceaccount/ca.crt; \
          kubectl config set-credentials self --token=/var/run/secrets/kubernetes.io/serviceaccount/token; \
          kubectl config set-context self --cluster=self --user=self; \
          NODE_IP=$(kubectl get pods ${HOSTNAME} -o json | jq --raw-output '.status.hostIP'); \
          NODE_NAME=$(kubectl get nodes -o wide | tail -n +2 | grep "${NODE_IP}" | cut -d' ' -f1); \
          PUBLIC_IP=$(kubectl get nodes ${NODE_NAME} -o json | jq --raw-output '.metadata.labels."dille.io/public-ip"'); \
          echo Update DNS with ${PUBLIC_IP}; \
          flarectl dns create-or-update --zone dille.io --name lb --type A --content ${PUBLIC_IP}
        env:
          - name: CF_API_KEY
            valueFrom:
              secretKeyRef:
                name: cloudflare
                key: CF_API_KEY
          - name: CF_API_EMAIL
            valueFrom:
              secretKeyRef:
                name: cloudflare
                key: CF_API_EMAIL
