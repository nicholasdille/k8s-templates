apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    component: alertmanager
    app: prometheus
    release: prometheus
    chart: prometheus-10.4.0
    heritage: Helm
  name: prometheus-alertmanager
data:
  alertmanager.yml: |
    global: {}
    receivers:
    - name: default-receiver
    route:
      group_interval: 5m
      group_wait: 10s
      receiver: default-receiver
      repeat_interval: 3h
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    component: alertmanager
    app: prometheus
    release: prometheus
    chart: prometheus-10.4.0
    heritage: Helm
  name: prometheus-alertmanager
spec:
  selector:
    matchLabels:
      component: alertmanager
      app: prometheus
      release: prometheus
  replicas: 1
  template:
    metadata:
      labels:
        component: alertmanager
        app: prometheus
        release: prometheus
        chart: prometheus-10.4.0
        heritage: Helm
    spec:
      serviceAccountName: prometheus-alertmanager
      containers:
      - name: prometheus-alertmanager
        image: prom/alertmanager:v0.20.0
        imagePullPolicy: IfNotPresent
        env:
        - name: POD_IP
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: status.podIP
        args:
        - --config.file=/etc/config/alertmanager.yml
        - --storage.path=/data
        - --cluster.advertise-address=$(POD_IP):6783
        - --web.external-url=http://localhost:9093
        ports:
        - containerPort: 9093
        readinessProbe:
          httpGet:
            path: /-/ready
            port: 9093
          initialDelaySeconds: 30
          timeoutSeconds: 30
        resources: {}
        volumeMounts:
        - name: config-volume
          mountPath: /etc/config
        - name: storage-volume
          mountPath: /data
          subPath: alertmanager
      - name: prometheus-alertmanager-configmap-reload
        image: jimmidyson/configmap-reload:v0.3.0
        imagePullPolicy: IfNotPresent
        args:
        - --volume-dir=/etc/config
        - --webhook-url=http://127.0.0.1:9093/-/reload
        resources: {}
        volumeMounts:
        - name: config-volume
          mountPath: /etc/config
          readOnly: true
      securityContext:
        fsGroup: 65534
        runAsGroup: 65534
        runAsNonRoot: true
        runAsUser: 65534
      volumes:
      - name: config-volume
        configMap:
          name: prometheus-alertmanager
      - name: storage-volume
        persistentVolumeClaim:
          claimName: prometheus-alertmanager
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  labels:
    component: alertmanager
    app: prometheus
    release: prometheus
    chart: prometheus-10.4.0
    heritage: Helm
  name: prometheus-alertmanager
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    component: alertmanager
    app: prometheus
    release: prometheus
    chart: prometheus-10.4.0
    heritage: Helm
  name: prometheus-alertmanager
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  labels:
    component: alertmanager
    app: prometheus
    release: prometheus
    chart: prometheus-10.4.0
    heritage: Helm
  name: prometheus-alertmanager
rules: []
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  labels:
    component: alertmanager
    app: prometheus
    release: prometheus
    chart: prometheus-10.4.0
    heritage: Helm
  name: prometheus-alertmanager
subjects:
- kind: ServiceAccount
  name: prometheus-alertmanager
  namespace: artifactory-qa
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: prometheus-alertmanager
---
apiVersion: v1
kind: Service
metadata:
  labels:
    component: alertmanager
    app: prometheus
    release: prometheus
    chart: prometheus-10.4.0
    heritage: Helm
  name: prometheus-alertmanager
spec:
  ports:
  - name: http
    port: 80
    protocol: TCP
    targetPort: 9093
  selector:
    component: alertmanager
    app: prometheus
    release: prometheus
  sessionAffinity: None
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    component: alertmanager
    app: prometheus
    release: prometheus
    chart: prometheus-10.4.0
    heritage: Helm
  name: prometheus-alertmanager
spec:
  ports:
  - name: http
    port: 80
    protocol: TCP
    targetPort: 9093
  selector:
    component: alertmanager
    app: prometheus
    release: prometheus
  sessionAffinity: None
  type: ClusterIP
---
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    component: server
    app: prometheus
    release: prometheus
    chart: prometheus-10.4.0
    heritage: Helm
  name: prometheus-server
data:
  alerting_rules.yml: |
    {}
  alerts: |
    {}
  prometheus.yml: |
    global:
      evaluation_interval: 1m
      scrape_interval: 1m
      scrape_timeout: 10s
    rule_files:
    - /etc/config/recording_rules.yml
    - /etc/config/alerting_rules.yml
    - /etc/config/rules
    - /etc/config/alerts
    scrape_configs:
    - job_name: prometheus
      static_configs:
      - targets:
        - localhost:9090
    - bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
      job_name: kubernetes-apiservers
      kubernetes_sd_configs:
      - role: endpoints
      relabel_configs:
      - action: keep
        regex: default;kubernetes;https
        source_labels:
        - __meta_kubernetes_namespace
        - __meta_kubernetes_service_name
        - __meta_kubernetes_endpoint_port_name
      scheme: https
      tls_config:
        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        insecure_skip_verify: true
    - bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
      job_name: kubernetes-nodes
      kubernetes_sd_configs:
      - role: node
      relabel_configs:
      - action: labelmap
        regex: __meta_kubernetes_node_label_(.+)
      - replacement: kubernetes.default.svc:443
        target_label: __address__
      - regex: (.+)
        replacement: /api/v1/nodes/$1/proxy/metrics
        source_labels:
        - __meta_kubernetes_node_name
        target_label: __metrics_path__
      scheme: https
      tls_config:
        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        insecure_skip_verify: true
    - bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
      job_name: kubernetes-nodes-cadvisor
      kubernetes_sd_configs:
      - role: node
      relabel_configs:
      - action: labelmap
        regex: __meta_kubernetes_node_label_(.+)
      - replacement: kubernetes.default.svc:443
        target_label: __address__
      - regex: (.+)
        replacement: /api/v1/nodes/$1/proxy/metrics/cadvisor
        source_labels:
        - __meta_kubernetes_node_name
        target_label: __metrics_path__
      scheme: https
      tls_config:
        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        insecure_skip_verify: true
    - job_name: kubernetes-service-endpoints
      kubernetes_sd_configs:
      - role: endpoints
      relabel_configs:
      - action: keep
        regex: true
        source_labels:
        - __meta_kubernetes_service_annotation_prometheus_io_scrape
      - action: replace
        regex: (https?)
        source_labels:
        - __meta_kubernetes_service_annotation_prometheus_io_scheme
        target_label: __scheme__
      - action: replace
        regex: (.+)
        source_labels:
        - __meta_kubernetes_service_annotation_prometheus_io_path
        target_label: __metrics_path__
      - action: replace
        regex: ([^:]+)(?::\d+)?;(\d+)
        replacement: $1:$2
        source_labels:
        - __address__
        - __meta_kubernetes_service_annotation_prometheus_io_port
        target_label: __address__
      - action: labelmap
        regex: __meta_kubernetes_service_label_(.+)
      - action: replace
        source_labels:
        - __meta_kubernetes_namespace
        target_label: kubernetes_namespace
      - action: replace
        source_labels:
        - __meta_kubernetes_service_name
        target_label: kubernetes_name
      - action: replace
        source_labels:
        - __meta_kubernetes_pod_node_name
        target_label: kubernetes_node
    - job_name: kubernetes-service-endpoints-slow
      kubernetes_sd_configs:
      - role: endpoints
      relabel_configs:
      - action: keep
        regex: true
        source_labels:
        - __meta_kubernetes_service_annotation_prometheus_io_scrape_slow
      - action: replace
        regex: (https?)
        source_labels:
        - __meta_kubernetes_service_annotation_prometheus_io_scheme
        target_label: __scheme__
      - action: replace
        regex: (.+)
        source_labels:
        - __meta_kubernetes_service_annotation_prometheus_io_path
        target_label: __metrics_path__
      - action: replace
        regex: ([^:]+)(?::\d+)?;(\d+)
        replacement: $1:$2
        source_labels:
        - __address__
        - __meta_kubernetes_service_annotation_prometheus_io_port
        target_label: __address__
      - action: labelmap
        regex: __meta_kubernetes_service_label_(.+)
      - action: replace
        source_labels:
        - __meta_kubernetes_namespace
        target_label: kubernetes_namespace
      - action: replace
        source_labels:
        - __meta_kubernetes_service_name
        target_label: kubernetes_name
      - action: replace
        source_labels:
        - __meta_kubernetes_pod_node_name
        target_label: kubernetes_node
      scrape_interval: 5m
      scrape_timeout: 30s
    - honor_labels: true
      job_name: prometheus-pushgateway
      kubernetes_sd_configs:
      - role: service
      relabel_configs:
      - action: keep
        regex: pushgateway
        source_labels:
        - __meta_kubernetes_service_annotation_prometheus_io_probe
    - job_name: kubernetes-services
      kubernetes_sd_configs:
      - role: service
      metrics_path: /probe
      params:
        module:
        - http_2xx
      relabel_configs:
      - action: keep
        regex: true
        source_labels:
        - __meta_kubernetes_service_annotation_prometheus_io_probe
      - source_labels:
        - __address__
        target_label: __param_target
      - replacement: blackbox
        target_label: __address__
      - source_labels:
        - __param_target
        target_label: instance
      - action: labelmap
        regex: __meta_kubernetes_service_label_(.+)
      - source_labels:
        - __meta_kubernetes_namespace
        target_label: kubernetes_namespace
      - source_labels:
        - __meta_kubernetes_service_name
        target_label: kubernetes_name
    - job_name: kubernetes-pods
      kubernetes_sd_configs:
      - role: pod
      relabel_configs:
      - action: keep
        regex: true
        source_labels:
        - __meta_kubernetes_pod_annotation_prometheus_io_scrape
      - action: replace
        regex: (.+)
        source_labels:
        - __meta_kubernetes_pod_annotation_prometheus_io_path
        target_label: __metrics_path__
      - action: replace
        regex: ([^:]+)(?::\d+)?;(\d+)
        replacement: $1:$2
        source_labels:
        - __address__
        - __meta_kubernetes_pod_annotation_prometheus_io_port
        target_label: __address__
      - action: labelmap
        regex: __meta_kubernetes_pod_label_(.+)
      - action: replace
        source_labels:
        - __meta_kubernetes_namespace
        target_label: kubernetes_namespace
      - action: replace
        source_labels:
        - __meta_kubernetes_pod_name
        target_label: kubernetes_pod_name
    - job_name: kubernetes-pods-slow
      kubernetes_sd_configs:
      - role: pod
      relabel_configs:
      - action: keep
        regex: true
        source_labels:
        - __meta_kubernetes_pod_annotation_prometheus_io_scrape_slow
      - action: replace
        regex: (.+)
        source_labels:
        - __meta_kubernetes_pod_annotation_prometheus_io_path
        target_label: __metrics_path__
      - action: replace
        regex: ([^:]+)(?::\d+)?;(\d+)
        replacement: $1:$2
        source_labels:
        - __address__
        - __meta_kubernetes_pod_annotation_prometheus_io_port
        target_label: __address__
      - action: labelmap
        regex: __meta_kubernetes_pod_label_(.+)
      - action: replace
        source_labels:
        - __meta_kubernetes_namespace
        target_label: kubernetes_namespace
      - action: replace
        source_labels:
        - __meta_kubernetes_pod_name
        target_label: kubernetes_pod_name
      scrape_interval: 5m
      scrape_timeout: 30s
    alerting:
      alertmanagers:
      - kubernetes_sd_configs:
          - role: pod
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        relabel_configs:
        - source_labels: [__meta_kubernetes_namespace]
          regex: artifactory-qa
          action: keep
        - source_labels: [__meta_kubernetes_pod_label_app]
          regex: prometheus
          action: keep
        - source_labels: [__meta_kubernetes_pod_label_component]
          regex: alertmanager
          action: keep
        - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_probe]
          regex: .*
          action: keep
        - source_labels: [__meta_kubernetes_pod_container_port_number]
          regex:
          action: drop
  recording_rules.yml: |
    {}
  rules: |
    {}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    component: server
    app: prometheus
    release: prometheus
    chart: prometheus-10.4.0
    heritage: Helm
  name: prometheus-server
spec:
  selector:
    matchLabels:
      component: server
      app: prometheus
      release: prometheus
  replicas: 1
  template:
    metadata:
      labels:
        component: server
        app: prometheus
        release: prometheus
        chart: prometheus-10.4.0
        heritage: Helm
    spec:
      serviceAccountName: prometheus-server
      containers:
      - name: prometheus-server-configmap-reload
        image: jimmidyson/configmap-reload:v0.3.0
        imagePullPolicy: IfNotPresent
        args:
        - --volume-dir=/etc/config
        - --webhook-url=http://127.0.0.1:9090/-/reload
        resources: {}
        volumeMounts:
        - name: config-volume
          mountPath: /etc/config
          readOnly: true
      - name: prometheus-server
        image: prom/prometheus:v2.16.0
        imagePullPolicy: IfNotPresent
        args:
        - --storage.tsdb.retention.time=15d
        - --config.file=/etc/config/prometheus.yml
        - --storage.tsdb.path=/data
        - --web.console.libraries=/etc/prometheus/console_libraries
        - --web.console.templates=/etc/prometheus/consoles
        - --web.enable-lifecycle
        - --web.external-url=prometheus.example.com
        ports:
        - containerPort: 9090
        readinessProbe:
          httpGet:
            path: /-/ready
            port: 9090
          initialDelaySeconds: 30
          timeoutSeconds: 30
          failureThreshold: 3
          successThreshold: 1
        livenessProbe:
          httpGet:
            path: /-/healthy
            port: 9090
          initialDelaySeconds: 30
          timeoutSeconds: 30
          failureThreshold: 3
          successThreshold: 1
        resources: {}
        volumeMounts:
        - name: config-volume
          mountPath: /etc/config
        - name: storage-volume
          mountPath: /data
          subPath: prometheus
      securityContext:
        fsGroup: 65534
        runAsGroup: 65534
        runAsNonRoot: true
        runAsUser: 65534
      terminationGracePeriodSeconds: 300
      volumes:
      - name: config-volume
        configMap:
          name: prometheus-server
      - name: storage-volume
        persistentVolumeClaim:
          claimName: prometheus-server
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  labels:
    component: server
    app: prometheus
    release: prometheus
    chart: prometheus-10.4.0
    heritage: Helm
  name: prometheus-server
spec:
  rules: null
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  labels:
    component: server
    app: prometheus
    release: prometheus
    chart: prometheus-10.4.0
    heritage: Helm
  name: prometheus-server
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 8Gi
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    component: server
    app: prometheus
    release: prometheus
    chart: prometheus-10.4.0
    heritage: Helm
  name: prometheus-server
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  labels:
    component: server
    app: prometheus
    release: prometheus
    chart: prometheus-10.4.0
    heritage: Helm
  name: prometheus-server
rules:
- apiGroups:
  - ""
  resources:
  - nodes
  - nodes/proxy
  - nodes/metrics
  - services
  - endpoints
  - pods
  - ingresses
  - configmaps
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - extensions
  resources:
  - ingresses/status
  - ingresses
  verbs:
  - get
  - list
  - watch
- nonResourceURLs:
  - /metrics
  verbs:
  - get
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  labels:
    component: server
    app: prometheus
    release: prometheus
    chart: prometheus-10.4.0
    heritage: Helm
  name: prometheus-server
subjects:
- kind: ServiceAccount
  name: prometheus-server
  namespace: artifactory-qa
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: prometheus-server
---
apiVersion: v1
kind: Service
metadata:
  labels:
    component: server
    app: prometheus
    release: prometheus
    chart: prometheus-10.4.0
    heritage: Helm
  name: prometheus-server
spec:
  ports:
  - name: http
    port: 80
    protocol: TCP
    targetPort: 9090
  selector:
    component: server
    app: prometheus
    release: prometheus
  sessionAffinity: None
  type: ClusterIP
---
rbac:
  create: true
podSecurityPolicy:
  enabled: false
imagePullSecrets: null
serviceAccounts:
  alertmanager:
    create: true
    name: null
  kubeStateMetrics:
    create: true
    name: null
  nodeExporter:
    create: true
    name: null
  pushgateway:
    create: true
    name: null
  server:
    create: true
    name: null
alertmanager:
  enabled: true
  name: alertmanager
  image:
    repository: prom/alertmanager
    tag: v0.20.0
    pullPolicy: IfNotPresent
  priorityClassName: ""
  extraArgs: {}
  prefixURL: ""
  baseURL: http://localhost:9093
  extraEnv: {}
  extraSecretMounts: []
  configMapOverrideName: ""
  configFromSecret: ""
  configFileName: alertmanager.yml
  ingress:
    enabled: false
    annotations: {}
    extraLabels: {}
    hosts: []
    extraPaths: []
    tls: []
  tolerations: []
  nodeSelector: {}
  affinity: {}
  podDisruptionBudget:
    enabled: false
    maxUnavailable: 1
  persistentVolume:
    enabled: true
    accessModes:
    - ReadWriteOnce
    annotations: {}
    existingClaim: ""
    mountPath: /data
    size: 2Gi
    subPath: alertmanager
  podAnnotations: {}
  podLabels: {}
  podSecurityPolicy:
    annotations: {}
  replicaCount: 1
  statefulSet:
    enabled: false
    podManagementPolicy: OrderedReady
    headless:
      annotations: {}
      labels: {}
      servicePort: 80
  resources: {}
  securityContext:
    runAsUser: 65534
    runAsNonRoot: true
    runAsGroup: 65534
    fsGroup: 65534
  service:
    annotations: {}
    labels: {}
    clusterIP: ""
    externalIPs: []
    loadBalancerIP: ""
    loadBalancerSourceRanges: []
    servicePort: 80
    sessionAffinity: None
    type: ClusterIP
configmapReload:
  name: configmap-reload
  image:
    repository: jimmidyson/configmap-reload
    tag: v0.3.0
    pullPolicy: IfNotPresent
  extraArgs: {}
  extraVolumeDirs: []
  extraConfigmapMounts: []
  resources: {}
kubeStateMetrics:
  enabled: true
  name: kube-state-metrics
  image:
    repository: quay.io/coreos/kube-state-metrics
    tag: v1.9.5
    pullPolicy: IfNotPresent
  priorityClassName: ""
  args: {}
  tolerations: []
  nodeSelector: {}
  podAnnotations: {}
  podSecurityPolicy:
    annotations: {}
  pod:
    labels: {}
  replicaCount: 1
  podDisruptionBudget:
    enabled: false
    maxUnavailable: 1
  resources: {}
  securityContext:
    runAsUser: 65534
    runAsNonRoot: true
  service:
    annotations:
      prometheus.io/scrape: "true"
    labels: {}
    clusterIP: None
    externalIPs: []
    loadBalancerIP: ""
    loadBalancerSourceRanges: []
    servicePort: 80
    serviceTelemetryPort: 81
    type: ClusterIP
nodeExporter:
  enabled: true
  hostNetwork: true
  hostPID: true
  name: node-exporter
  image:
    repository: prom/node-exporter
    tag: v0.18.1
    pullPolicy: IfNotPresent
  podSecurityPolicy:
    annotations: {}
  priorityClassName: ""
  updateStrategy:
    type: RollingUpdate
  extraArgs: {}
  extraHostPathMounts: []
  extraConfigmapMounts: []
  tolerations: []
  nodeSelector: {}
  podAnnotations: {}
  pod:
    labels: {}
  podDisruptionBudget:
    enabled: false
    maxUnavailable: 1
  resources: {}
  securityContext: {}
  service:
    annotations:
      prometheus.io/scrape: "true"
    labels: {}
    clusterIP: None
    externalIPs: []
    hostPort: 9100
    loadBalancerIP: ""
    loadBalancerSourceRanges: []
    servicePort: 9100
    type: ClusterIP
server:
  enabled: true
  name: server
  sidecarContainers: null
  image:
    repository: prom/prometheus
    tag: v2.16.0
    pullPolicy: IfNotPresent
  priorityClassName: ""
  prefixURL: ""
  baseURL: prometheus.example.com
  env: []
  extraFlags:
  - web.enable-lifecycle
  configPath: /etc/config/prometheus.yml
  global:
    scrape_interval: 1m
    scrape_timeout: 10s
    evaluation_interval: 1m
  remoteWrite: {}
  remoteRead: {}
  extraArgs: {}
  extraInitContainers: []
  extraVolumeMounts: []
  extraVolumes: []
  extraHostPathMounts: []
  extraConfigmapMounts: []
  extraSecretMounts: []
  configMapOverrideName: ""
  ingress:
    enabled: true
    annotations: {}
    extraLabels: {}
    hosts: []
    extraPaths: []
    tls: []
  tolerations: []
  nodeSelector: {}
  affinity: {}
  podDisruptionBudget:
    enabled: false
    maxUnavailable: 1
  persistentVolume:
    enabled: true
    accessModes:
    - ReadWriteOnce
    annotations: {}
    existingClaim: ""
    mountPath: /data
    size: 8Gi
    subPath: prometheus
  emptyDir:
    sizeLimit: ""
  podAnnotations: {}
  podLabels: {}
  alertmanagers: []
  podSecurityPolicy:
    annotations: {}
  replicaCount: 1
  statefulSet:
    enabled: false
    annotations: {}
    labels: {}
    podManagementPolicy: OrderedReady
    headless:
      annotations: {}
      labels: {}
      servicePort: 80
  readinessProbeInitialDelay: 30
  readinessProbeTimeout: 30
  readinessProbeFailureThreshold: 3
  readinessProbeSuccessThreshold: 1
  livenessProbeInitialDelay: 30
  livenessProbeTimeout: 30
  livenessProbeFailureThreshold: 3
  livenessProbeSuccessThreshold: 1
  resources: {}
  verticalAutoscaler:
    enabled: false
  securityContext:
    runAsUser: 65534
    runAsNonRoot: true
    runAsGroup: 65534
    fsGroup: 65534
  service:
    annotations: {}
    labels: {}
    clusterIP: ""
    externalIPs: []
    loadBalancerIP: ""
    loadBalancerSourceRanges: []
    servicePort: 80
    sessionAffinity: None
    type: ClusterIP
    gRPC:
      enabled: false
      servicePort: 10901
    statefulsetReplica:
      enabled: false
      replica: 0
  terminationGracePeriodSeconds: 300
  retention: 15d
pushgateway:
  enabled: true
  name: pushgateway
  image:
    repository: prom/pushgateway
    tag: v1.0.1
    pullPolicy: IfNotPresent
  priorityClassName: ""
  extraArgs: {}
  ingress:
    enabled: false
    annotations: {}
    hosts: []
    extraPaths: []
    tls: []
  tolerations: []
  nodeSelector: {}
  podAnnotations: {}
  podSecurityPolicy:
    annotations: {}
  replicaCount: 1
  podDisruptionBudget:
    enabled: false
    maxUnavailable: 1
  resources: {}
  securityContext:
    runAsUser: 65534
    runAsNonRoot: true
  service:
    annotations:
      prometheus.io/probe: pushgateway
    labels: {}
    clusterIP: ""
    externalIPs: []
    loadBalancerIP: ""
    loadBalancerSourceRanges: []
    servicePort: 9091
    type: ClusterIP
  persistentVolume:
    enabled: false
    accessModes:
    - ReadWriteOnce
    annotations: {}
    existingClaim: ""
    mountPath: /data
    size: 2Gi
    subPath: pushgateway
alertmanagerFiles:
  alertmanager.yml:
    global: {}
    receivers:
    - name: default-receiver
    route:
      group_wait: 10s
      group_interval: 5m
      receiver: default-receiver
      repeat_interval: 3h
serverFiles:
  alerting_rules.yml: {}
  alerts: {}
  recording_rules.yml: {}
  rules: {}
  prometheus.yml:
    rule_files:
    - /etc/config/recording_rules.yml
    - /etc/config/alerting_rules.yml
    - /etc/config/rules
    - /etc/config/alerts
    scrape_configs:
    - job_name: prometheus
      static_configs:
      - targets:
        - localhost:9090
    - job_name: kubernetes-apiservers
      kubernetes_sd_configs:
      - role: endpoints
      scheme: https
      tls_config:
        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        insecure_skip_verify: true
      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
      relabel_configs:
      - source_labels:
        - __meta_kubernetes_namespace
        - __meta_kubernetes_service_name
        - __meta_kubernetes_endpoint_port_name
        action: keep
        regex: default;kubernetes;https
    - job_name: kubernetes-nodes
      scheme: https
      tls_config:
        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        insecure_skip_verify: true
      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
      kubernetes_sd_configs:
      - role: node
      relabel_configs:
      - action: labelmap
        regex: __meta_kubernetes_node_label_(.+)
      - target_label: __address__
        replacement: kubernetes.default.svc:443
      - source_labels:
        - __meta_kubernetes_node_name
        regex: (.+)
        target_label: __metrics_path__
        replacement: /api/v1/nodes/$1/proxy/metrics
    - job_name: kubernetes-nodes-cadvisor
      scheme: https
      tls_config:
        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        insecure_skip_verify: true
      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
      kubernetes_sd_configs:
      - role: node
      relabel_configs:
      - action: labelmap
        regex: __meta_kubernetes_node_label_(.+)
      - target_label: __address__
        replacement: kubernetes.default.svc:443
      - source_labels:
        - __meta_kubernetes_node_name
        regex: (.+)
        target_label: __metrics_path__
        replacement: /api/v1/nodes/$1/proxy/metrics/cadvisor
    - job_name: kubernetes-service-endpoints
      kubernetes_sd_configs:
      - role: endpoints
      relabel_configs:
      - source_labels:
        - __meta_kubernetes_service_annotation_prometheus_io_scrape
        action: keep
        regex: true
      - source_labels:
        - __meta_kubernetes_service_annotation_prometheus_io_scheme
        action: replace
        target_label: __scheme__
        regex: (https?)
      - source_labels:
        - __meta_kubernetes_service_annotation_prometheus_io_path
        action: replace
        target_label: __metrics_path__
        regex: (.+)
      - source_labels:
        - __address__
        - __meta_kubernetes_service_annotation_prometheus_io_port
        action: replace
        target_label: __address__
        regex: ([^:]+)(?::\d+)?;(\d+)
        replacement: $1:$2
      - action: labelmap
        regex: __meta_kubernetes_service_label_(.+)
      - source_labels:
        - __meta_kubernetes_namespace
        action: replace
        target_label: kubernetes_namespace
      - source_labels:
        - __meta_kubernetes_service_name
        action: replace
        target_label: kubernetes_name
      - source_labels:
        - __meta_kubernetes_pod_node_name
        action: replace
        target_label: kubernetes_node
    - job_name: kubernetes-service-endpoints-slow
      scrape_interval: 5m
      scrape_timeout: 30s
      kubernetes_sd_configs:
      - role: endpoints
      relabel_configs:
      - source_labels:
        - __meta_kubernetes_service_annotation_prometheus_io_scrape_slow
        action: keep
        regex: true
      - source_labels:
        - __meta_kubernetes_service_annotation_prometheus_io_scheme
        action: replace
        target_label: __scheme__
        regex: (https?)
      - source_labels:
        - __meta_kubernetes_service_annotation_prometheus_io_path
        action: replace
        target_label: __metrics_path__
        regex: (.+)
      - source_labels:
        - __address__
        - __meta_kubernetes_service_annotation_prometheus_io_port
        action: replace
        target_label: __address__
        regex: ([^:]+)(?::\d+)?;(\d+)
        replacement: $1:$2
      - action: labelmap
        regex: __meta_kubernetes_service_label_(.+)
      - source_labels:
        - __meta_kubernetes_namespace
        action: replace
        target_label: kubernetes_namespace
      - source_labels:
        - __meta_kubernetes_service_name
        action: replace
        target_label: kubernetes_name
      - source_labels:
        - __meta_kubernetes_pod_node_name
        action: replace
        target_label: kubernetes_node
    - job_name: prometheus-pushgateway
      honor_labels: true
      kubernetes_sd_configs:
      - role: service
      relabel_configs:
      - source_labels:
        - __meta_kubernetes_service_annotation_prometheus_io_probe
        action: keep
        regex: pushgateway
    - job_name: kubernetes-services
      metrics_path: /probe
      params:
        module:
        - http_2xx
      kubernetes_sd_configs:
      - role: service
      relabel_configs:
      - source_labels:
        - __meta_kubernetes_service_annotation_prometheus_io_probe
        action: keep
        regex: true
      - source_labels:
        - __address__
        target_label: __param_target
      - target_label: __address__
        replacement: blackbox
      - source_labels:
        - __param_target
        target_label: instance
      - action: labelmap
        regex: __meta_kubernetes_service_label_(.+)
      - source_labels:
        - __meta_kubernetes_namespace
        target_label: kubernetes_namespace
      - source_labels:
        - __meta_kubernetes_service_name
        target_label: kubernetes_name
    - job_name: kubernetes-pods
      kubernetes_sd_configs:
      - role: pod
      relabel_configs:
      - source_labels:
        - __meta_kubernetes_pod_annotation_prometheus_io_scrape
        action: keep
        regex: true
      - source_labels:
        - __meta_kubernetes_pod_annotation_prometheus_io_path
        action: replace
        target_label: __metrics_path__
        regex: (.+)
      - source_labels:
        - __address__
        - __meta_kubernetes_pod_annotation_prometheus_io_port
        action: replace
        regex: ([^:]+)(?::\d+)?;(\d+)
        replacement: $1:$2
        target_label: __address__
      - action: labelmap
        regex: __meta_kubernetes_pod_label_(.+)
      - source_labels:
        - __meta_kubernetes_namespace
        action: replace
        target_label: kubernetes_namespace
      - source_labels:
        - __meta_kubernetes_pod_name
        action: replace
        target_label: kubernetes_pod_name
    - job_name: kubernetes-pods-slow
      scrape_interval: 5m
      scrape_timeout: 30s
      kubernetes_sd_configs:
      - role: pod
      relabel_configs:
      - source_labels:
        - __meta_kubernetes_pod_annotation_prometheus_io_scrape_slow
        action: keep
        regex: true
      - source_labels:
        - __meta_kubernetes_pod_annotation_prometheus_io_path
        action: replace
        target_label: __metrics_path__
        regex: (.+)
      - source_labels:
        - __address__
        - __meta_kubernetes_pod_annotation_prometheus_io_port
        action: replace
        regex: ([^:]+)(?::\d+)?;(\d+)
        replacement: $1:$2
        target_label: __address__
      - action: labelmap
        regex: __meta_kubernetes_pod_label_(.+)
      - source_labels:
        - __meta_kubernetes_namespace
        action: replace
        target_label: kubernetes_namespace
      - source_labels:
        - __meta_kubernetes_pod_name
        action: replace
        target_label: kubernetes_pod_name
extraScrapeConfigs: null
alertRelabelConfigs: null
networkPolicy:
  enabled: false
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    component: kube-state-metrics
    app: prometheus
    release: prometheus
    chart: prometheus-10.4.0
    heritage: Helm
  name: prometheus-kube-state-metrics
spec:
  selector:
    matchLabels:
      component: kube-state-metrics
      app: prometheus
      release: prometheus
  replicas: 1
  template:
    metadata:
      labels:
        component: kube-state-metrics
        app: prometheus
        release: prometheus
        chart: prometheus-10.4.0
        heritage: Helm
    spec:
      serviceAccountName: prometheus-kube-state-metrics
      containers:
      - name: prometheus-kube-state-metrics
        image: quay.io/coreos/kube-state-metrics:v1.9.5
        imagePullPolicy: IfNotPresent
        ports:
        - name: metrics
          containerPort: 8080
        - name: telemetry
          containerPort: 8081
        resources: {}
      securityContext:
        runAsNonRoot: true
        runAsUser: 65534
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    component: kube-state-metrics
    app: prometheus
    release: prometheus
    chart: prometheus-10.4.0
    heritage: Helm
  name: prometheus-kube-state-metrics
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  labels:
    component: kube-state-metrics
    app: prometheus
    release: prometheus
    chart: prometheus-10.4.0
    heritage: Helm
  name: prometheus-kube-state-metrics
rules:
- apiGroups:
  - ""
  resources:
  - namespaces
  - nodes
  - persistentvolumeclaims
  - pods
  - services
  - resourcequotas
  - replicationcontrollers
  - limitranges
  - persistentvolumeclaims
  - persistentvolumes
  - endpoints
  - secrets
  - configmaps
  verbs:
  - list
  - watch
- apiGroups:
  - extensions
  resources:
  - daemonsets
  - deployments
  - ingresses
  - replicasets
  verbs:
  - list
  - watch
- apiGroups:
  - apps
  resources:
  - daemonsets
  - deployments
  - statefulsets
  - replicasets
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - batch
  resources:
  - cronjobs
  - jobs
  verbs:
  - list
  - watch
- apiGroups:
  - autoscaling
  resources:
  - horizontalpodautoscalers
  verbs:
  - list
  - watch
- apiGroups:
  - policy
  resources:
  - poddisruptionbudgets
  verbs:
  - list
  - watch
- apiGroups:
  - storage.k8s.io
  resources:
  - storageclasses
  - volumeattachments
  verbs:
  - list
  - watch
- apiGroups:
  - certificates.k8s.io
  resources:
  - certificatesigningrequests
  verbs:
  - list
  - watch
- apiGroups:
  - networking.k8s.io
  resources:
  - networkpolicies
  verbs:
  - list
  - watch
- apiGroups:
  - admissionregistration.k8s.io
  resources:
  - validatingwebhookconfigurations
  - mutatingwebhookconfigurations
  verbs:
  - list
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  labels:
    component: kube-state-metrics
    app: prometheus
    release: prometheus
    chart: prometheus-10.4.0
    heritage: Helm
  name: prometheus-kube-state-metrics
subjects:
- kind: ServiceAccount
  name: prometheus-kube-state-metrics
  namespace: artifactory-qa
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: prometheus-kube-state-metrics
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    prometheus.io/scrape: "true"
  labels:
    component: kube-state-metrics
    app: prometheus
    release: prometheus
    chart: prometheus-10.4.0
    heritage: Helm
  name: prometheus-kube-state-metrics
spec:
  clusterIP: None
  ports:
  - name: http
    port: 80
    protocol: TCP
    targetPort: 8080
  - name: telemetry
    port: 81
    protocol: TCP
    targetPort: 8081
  selector:
    component: kube-state-metrics
    app: prometheus
    release: prometheus
  type: ClusterIP
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  labels:
    component: node-exporter
    app: prometheus
    release: prometheus
    chart: prometheus-10.4.0
    heritage: Helm
  name: prometheus-node-exporter
spec:
  selector:
    matchLabels:
      component: node-exporter
      app: prometheus
      release: prometheus
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        component: node-exporter
        app: prometheus
        release: prometheus
        chart: prometheus-10.4.0
        heritage: Helm
    spec:
      serviceAccountName: prometheus-node-exporter
      containers:
      - name: prometheus-node-exporter
        image: prom/node-exporter:v0.18.1
        imagePullPolicy: IfNotPresent
        args:
        - --path.procfs=/host/proc
        - --path.sysfs=/host/sys
        ports:
        - name: metrics
          containerPort: 9100
          hostPort: 9100
        resources: {}
        volumeMounts:
        - name: proc
          mountPath: /host/proc
          readOnly: true
        - name: sys
          mountPath: /host/sys
          readOnly: true
      hostNetwork: true
      hostPID: true
      volumes:
      - name: proc
        hostPath:
          path: /proc
      - name: sys
        hostPath:
          path: /sys
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    component: node-exporter
    app: prometheus
    release: prometheus
    chart: prometheus-10.4.0
    heritage: Helm
  name: prometheus-node-exporter
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    prometheus.io/scrape: "true"
  labels:
    component: node-exporter
    app: prometheus
    release: prometheus
    chart: prometheus-10.4.0
    heritage: Helm
  name: prometheus-node-exporter
spec:
  clusterIP: None
  ports:
  - name: metrics
    port: 9100
    protocol: TCP
    targetPort: 9100
  selector:
    component: node-exporter
    app: prometheus
    release: prometheus
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    component: pushgateway
    app: prometheus
    release: prometheus
    chart: prometheus-10.4.0
    heritage: Helm
  name: prometheus-pushgateway
spec:
  selector:
    matchLabels:
      component: pushgateway
      app: prometheus
      release: prometheus
  replicas: 1
  template:
    metadata:
      labels:
        component: pushgateway
        app: prometheus
        release: prometheus
        chart: prometheus-10.4.0
        heritage: Helm
    spec:
      serviceAccountName: prometheus-pushgateway
      containers:
      - name: prometheus-pushgateway
        image: prom/pushgateway:v1.0.1
        imagePullPolicy: IfNotPresent
        args: null
        ports:
        - containerPort: 9091
        livenessProbe:
          httpGet:
            path: /-/healthy
            port: 9091
          initialDelaySeconds: 10
          timeoutSeconds: 10
        readinessProbe:
          httpGet:
            path: /-/ready
            port: 9091
          initialDelaySeconds: 10
          timeoutSeconds: 10
        resources: {}
      securityContext:
        runAsNonRoot: true
        runAsUser: 65534
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    component: pushgateway
    app: prometheus
    release: prometheus
    chart: prometheus-10.4.0
    heritage: Helm
  name: prometheus-pushgateway
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  labels:
    component: pushgateway
    app: prometheus
    release: prometheus
    chart: prometheus-10.4.0
    heritage: Helm
  name: prometheus-pushgateway
rules: []
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  labels:
    component: pushgateway
    app: prometheus
    release: prometheus
    chart: prometheus-10.4.0
    heritage: Helm
  name: prometheus-pushgateway
subjects:
- kind: ServiceAccount
  name: prometheus-pushgateway
  namespace: artifactory-qa
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: prometheus-pushgateway
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    prometheus.io/probe: pushgateway
  labels:
    component: pushgateway
    app: prometheus
    release: prometheus
    chart: prometheus-10.4.0
    heritage: Helm
  name: prometheus-pushgateway
spec:
  ports:
  - name: http
    port: 9091
    protocol: TCP
    targetPort: 9091
  selector:
    component: pushgateway
    app: prometheus
    release: prometheus
  type: ClusterIP
