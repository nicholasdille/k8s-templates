apiVersion: v1
kind: Secret
metadata:
  name: traefik-api
  namespace: traefik
  labels:
    example.com/loadbalancer: default
type: Opaque
stringData:
  traefik: ""
---
apiVersion: traefik.containo.us/v1alpha1
kind: Middleware
metadata:
  name: traefik-api-auth
  namespace: traefik
  labels:
    example.com/loadbalancer: default
spec:
  basicAuth:
    realm: traefik api
    secret: traefik-api
---
apiVersion: traefik.containo.us/v1alpha1
kind: IngressRoute
metadata:
  name: traefik-api
  namespace: traefik
  labels:
    example.com/loadbalancer: default
spec:
  entryPoints:
  - http
  routes:
  - match: Host(`traefik.example.com`) && PathPrefix(`/api`)
    kind: Rule
    priority: 12
    services:
    - name: api@internal
      kind: TraefikService
    middlewares:
    - name: traefik-api-auth
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: traefik
  namespace: traefik
data:
  traefik.yaml: |
    global:
      checkNewVersion: false
      sendAnonymousUsage: false
    log:
      level: INFO
      format: common
    api:
      dashboard: true
      insecure: true
    ping:
      entryPoint: ping
    metrics:
      prometheus:
        entryPoint: metrics
    entrypoints:
      ping:
        address: ":81"
      http:
        address: ":80"
      https:
        address: ":443"
      metrics:
        address: ":8082"
      traefik:
        address: ":8080"
    providers:
      kubernetesCRD: {}
---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  name: ingressroutes.traefik.containo.us
spec:
  group: traefik.containo.us
  version: v1alpha1
  names:
    kind: IngressRoute
    plural: ingressroutes
    singular: ingressroute
  scope: Namespaced
---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  name: ingressroutetcps.traefik.containo.us
spec:
  group: traefik.containo.us
  version: v1alpha1
  names:
    kind: IngressRouteTCP
    plural: ingressroutetcps
    singular: ingressroutetcp
  scope: Namespaced
---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  name: middlewares.traefik.containo.us
spec:
  group: traefik.containo.us
  version: v1alpha1
  names:
    kind: Middleware
    plural: middlewares
    singular: middleware
  scope: Namespaced
---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  name: tlsoptions.traefik.containo.us
spec:
  group: traefik.containo.us
  version: v1alpha1
  names:
    kind: TLSOption
    plural: tlsoptions
    singular: tlsoption
  scope: Namespaced
---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  name: traefikservices.traefik.containo.us
spec:
  group: traefik.containo.us
  version: v1alpha1
  names:
    kind: TraefikService
    plural: traefikservices
    singular: traefikservice
  scope: Namespaced
---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  name: traefikservices.traefik.containo.us
spec:
  group: traefik.containo.us
  version: v1alpha1
  names:
    kind: TraefikService
    plural: traefikservices
    singular: traefikservice
  scope: Namespaced
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: traefik
  namespace: traefik
spec:
  replicas: 1
  selector:
    matchLabels:
      app: traefik
  template:
    metadata:
      labels:
        app: traefik
    spec:
      serviceAccountName: traefik
      strategy:
        type: Recreate
      containers:
      - name: main
        image: traefik:v2.1
        imagePullPolicy: Always
        volumeMounts:
        - mountPath: /etc/traefik
          name: config
        - name: tz-config
          mountPath: /etc/localtime
        ports:
        - name: http
          containerPort: 80
          hostPort: 80
          protocol: TCP
        - name: https
          containerPort: 443
          hostPort: 443
          protocol: TCP
        - name: dashboard
          containerPort: 8080
          protocol: TCP
        - name: metrics
          containerPort: 8082
          protocol: TCP
        args:
        - --configfile=/config/traefik.yaml
      volumes:
      - name: config
        configMap:
          name: traefik
      - name: tz-config
        hostPath:
          path: /usr/share/zoneinfo/Europe/Berlin
      initContainers:
      - name: traefik-init-dns
        image: alpine
        command:
        - sh
        args:
        - -c
        - |
          curl -sLo /usr/local/bin/kubectl https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl; \
          chmod +x /usr/local/bin/kubectl; \
          kubectl config set-cluster self --server=${KUBERNETES_SERVICE_HOST}:${KUBERNETES_SERVICE_PORT} --certificate-authority=/var/run/secrets/kubernetes.io/serviceaccount/ca.crt; \
          kubectl config set-credentials self --token=/var/run/secrets/kubernetes.io/serviceaccount/token; \
          kubectl config set-context self --cluster=self --user=self; \
          NODE_IP=$(kubectl get pods ${HOSTNAME} -o json | jq --raw-output '.status.hostIP'); \
          NODE_NAME=$(kubectl get nodes -o wide | tail -n +2 | grep "${NODE_IP}" | cut -d' ' -f1); \
          PUBLIC_IP=$(kubectl get nodes ${NODE_NAME} -o json | jq --raw-output ".metadata.labels.'${DOMAIN}/${LABEL_NAME}'"); \
          echo Update DNS with ${PUBLIC_IP}; \
          flarectl dns create-or-update --zone ${DOMAIN} --name lb --type A --content ${PUBLIC_IP}
        env:
        - name: LABEL_NAME
          value: public-ip
        - name: DOMAIN
          value: dille.io
        - name: CF_API_KEY
          valueFrom:
            secretKeyRef:
              name: cloudflare
              key: CF_API_KEY
        - name: CF_API_EMAIL
          valueFrom:
            secretKeyRef:
              name: cloudflare
              key: CF_API_EMAIL
---
apiVersion: v1
kind: Service
metadata:
  name: traefik-metrics
  namespace: traefik
spec:
  type: ClusterIP
  selector:
    app: traefik
  ports:
  - name: metrics
    port: 8082
    targetPort: 8082
---
apiVersion: v1
kind: Namespace
metadata:
  name: traefik
  metadata:
    labels:
      name: traefik
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: traefik-ingress-controller
rules:
- apiGroups:
  - ""
  resources:
  - services
  - endpoints
  - secrets
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - extensions
  resources:
  - ingresses
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - extensions
  resources:
  - ingresses/status
  verbs:
  - update
- apiGroups:
  - traefik.containo.us
  resources:
  - middlewares
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - traefik.containo.us
  resources:
  - ingressroutes
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - traefik.containo.us
  resources:
  - ingressroutetcps
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - traefik.containo.us
  resources:
  - tlsoptions
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - traefik.containo.us
  resources:
  - traefikservices
  verbs:
  - get
  - list
  - watch
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: traefik
  namespace: traefik
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: traefik-ingress-controller
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: traefik-ingress-controller
subjects:
- kind: ServiceAccount
  name: traefik
  namespace: traefik
---
apiVersion: v1
kind: Service
metadata:
  name: traefik-dashboard
  namespace: traefik
  labels:
    example.com/loadbalancer: default
spec:
  type: ClusterIP
  selector:
    app: traefik
  ports:
  - name: dashboard
    port: 80
    targetPort: 8080
---
apiVersion: v1
kind: Secret
metadata:
  name: traefik-dashboard
  namespace: traefik
  labels:
    example.com/loadbalancer: default
type: Opaque
stringData:
  traefik: ""
---
apiVersion: traefik.containo.us/v1alpha1
kind: Middleware
metadata:
  name: traefik-dashboard-auth
  namespace: traefik
  labels:
    example.com/loadbalancer: default
spec:
  basicAuth:
    realm: traefik dashboard
    secret: traefik-dashboard
---
apiVersion: traefik.containo.us/v1alpha1
kind: IngressRoute
metadata:
  name: traefik-dashboard
  namespace: traefik
  labels:
    example.com/loadbalancer: default
spec:
  entryPoints:
  - http
  routes:
  - match: Host(`traefik.example.com`)
    kind: Rule
    priority: 12
    services:
    - name: traefik-dashboard
      port: 80
      strategy: RoundRobin
    middlewares:
    - name: traefik-dashboard-auth
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: external-dns
  namespace: traefik
spec:
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: external-dns
  template:
    metadata:
      labels:
        app: external-dns
    spec:
      serviceAccountName: external-dns-traefik
      containers:
      - name: external-dns
        image: registry.opensource.zalan.do/teapot/external-dns:latest
        args:
        - --txt-owner-id=traefik
        - --source=service
        - --namespace=traefik
        - --domain-filter=example.com.
        - --provider=cloudflare
        - --publish-host-ip
        env:
        - name: CF_API_KEY
          valueFrom:
            secretKeyRef:
              name: cloudflare
              key: CF_API_KEY
        - name: CF_API_EMAIL
          valueFrom:
            secretKeyRef:
              name: cloudflare
              key: CF_API_EMAIL
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: external-dns-traefik
  namespace: traefik
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  name: external-dns-traefik
rules:
- apiGroups:
  - ""
  resources:
  - services
  verbs:
  - get
  - watch
  - list
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - get
  - watch
  - list
- apiGroups:
  - extensions
  resources:
  - ingresses
  verbs:
  - get
  - watch
  - list
- apiGroups:
  - ""
  resources:
  - nodes
  verbs:
  - list
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: external-dns-traefik-viewer
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: external-dns-traefik
subjects:
- kind: ServiceAccount
  name: external-dns-traefik
  namespace: traefik
---
apiVersion: v1
kind: Secret
metadata:
  name: cloudflare
  namespace: traefik
type: Opaque
stringData:
  CF_API_EMAIL: cf-api-email
  CF_API_KEY: cf-api-key
---
apiVersion: v1
kind: Service
metadata:
  name: traefik
  namespace: traefik
  annotations:
    external-dns.alpha.kubernetes.io/hostname: lb.example.com
spec:
  selector:
    app: traefik
  ports:
  - name: http
    protocol: TCP
    port: 80
    targetPort: 80
  clusterIP: None
---
apiVersion: v1
kind: Secret
metadata:
  name: cloudflare
  namespace: traefik
type: Opaque
stringData:
  CF_API_EMAIL: cf-api-key
  CF_API_KEY: cf-api-key
